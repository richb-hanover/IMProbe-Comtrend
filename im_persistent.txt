<!--
Command-line Return (com.dartware.tool.persistent.txt)
Copyright© HelpSystems, LLC. All rights reserved.
Test of persistent variables by round-tripping values:
    pass them into script via command line and stdin,
    get results back,
    post to status window.
-->

<header>
  type  =  "cmd-line"
  package  =  "com.dartware"
  probe_name  =  "tool.persistent"
  human_name  =  "Command Line Persistent Variables"
  version  =  "1.1"
  address_type  =  "IP"
  display_name  =  "Miscellaneous/Test/Command Line Persistent Variables"
</header>
<description>
\GB\Command Line Persistent Variables\p\

This is an example of passing persistent variables into a commandline
probe. The attached Python script takes the variables, updates
them, and returns them to be used for the next iteration.
The script below processes two variables: \b\$SearchString\p\ and
\b\$numericParam\p\. The script appends an "a" to $SearchString, and
adds 1 to the $numericParam and returns both values. (This is a useless
script, created just to demonstrate use of persistent variables.)
Both variables are uninitialized when the probe is executed the very
first time. The script can detect this startup condition because an
uninitialized variable is passed to the script as the variable's
name.

For example, the variable named $SearchString will be passed as a
string - "$SearchString". The script can detect this value - it's the
same name that will be used to return the new result for the variable
- and treat the variable as uninitialized, by assigning a sensible
default value.

The Python script tests the passed-in values to see if they match the
expected name and initializes them accordingly.
\i\Note:\p\ This device's address should be set to \i\localhost\p\.
\i\Note:\p\ These variables could be initialized by setting them in
the <parameter> section, but this exposes a lot of the script's
internal variables to the customer: this is generally not a good
design.
</description>

<parameters>
-- no human-editable parameters
</parameters>

<command-line>
-- 'path' forces the InterMapper Settings:Tools directory if empty
-- 'cmd' invokes the probe code, $numericParam passed "on the command line"
-- 'args' are appended to cmd when invoking the probe
-- 'input' is passed on stdin (avoids displaying info on cmd line, e.g., in top)
   path=""
   cmd="${PYTHON} persistent.py $numericParam"
   args=''
   input="${SearchString}"
</command-line>

<command-exit>
-- These match the exit codes used by Nagios plugins
  down:  ${EXIT_CODE}=4
  critical:  ${EXIT_CODE}=3
  alarm:  ${EXIT_CODE}=2
  warn:  ${EXIT_CODE}=1
  okay:  ${EXIT_CODE}=0
</command-exit>

<command-display>
\b5\ Current value of SearchString and numericParam\p0\
  Search String: $SearchString
  Number: $numericParam
</command-display>

<tool:persistent.py>

# Insert your Python Code here...

</tool>