<!--
Command-line Return (com.blueberryhillsoftware.scrape_comtrend.txt)
Copyright (c) Blueberry Hill Software, LLC. All rights reserved.
Connect to a Comtrend DSL modem and scrape the SNR values
Tested on Comtrend AR-5381u
-->

<header>
  type  =  "cmd-line"
  package  =  "com.blueberryhillsoftware"
  probe_name  =  "test.comtrend"
  human_name  =  "Comtrend SNR"
  version  =  "1.0"
  address_type  =  "IP"
  display_name  =  "Miscellaneous/Test/Comtrend SNR"
</header>
<description>
\GB\Comtrend SNR\p\

Scrape SNR values from a Comtrend modem
</description>

<parameters>
-- no human-editable parameters
</parameters>

<command-line>
-- 'path' forces the InterMapper Settings:Tools directory if empty
-- 'cmd' invokes the probe code, $numericParam passed "on the command line"
-- 'args' are appended to cmd when invoking the probe
-- 'input' is passed on stdin (avoids displaying info on cmd line, e.g., in top)
   path=""
   cmd="${PYTHON} im_comtrend.py"
   args=''
   -- input="${SearchString}"
</command-line>

<command-exit>
-- These match the exit codes used by Nagios plugins
  down:  ${EXIT_CODE}=4
  critical:  ${EXIT_CODE}=3
  alarm:  ${EXIT_CODE}=2
  warn:  ${EXIT_CODE}=1
  okay:  ${EXIT_CODE}=0
</command-exit>

<command-display>
\b5\ SNR Values:\p0\
  Downstream: ${chartable: ##.# : $ds/10}
    Upstream: ${chartable: ##.# : $us/10}
</command-display>

<tool:im_comtrend.py>
#!/usr/local/imdc/core/python/bin/imdc -OO
# The line above is required to run as an IMDC plugin

# Scrape the Comtrend modem to return its SNR values

import os
import sys
import getopt
import urllib2
import base64
import re

try:
    searchString = ""
    opts, args = getopt.getopt(sys.argv[1:], "")
except getopt.GetoptError, err:
    searchString = "getopt error %d" % (err)

request = urllib2.Request('http://192.168.1.1/statsadsl.html')
base64string = base64.b64encode('%s:%s' % ('root', '12345'))
request.add_header("Authorization", "Basic %s" % base64string)
result = urllib2.urlopen(request)

content = result.read()
lines = content.split('</tr>')      # split on new <tr> elements

lines = [elem for elem in lines if 'SNR' in elem ]
line = lines[0]                     # get the first line with "SNR"
regex = re.compile(r'\d+')
p = regex.findall(line)             # isolate numbers ("0.1 dB 119 156" => ['0', '1', '119', '156'])

# print "DS: %s, US: %s" % (p[2], p[3])

retstring = ""
retcode=0                               # probe (system) exit code

print "\{ $ds := %s, $us := %s }" % (p[2], p[3])
sys.exit(retcode)

</tool>
